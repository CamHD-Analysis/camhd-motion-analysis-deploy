
## Todo.
# Change Docker entyrpoint to script which (optionally) checks for destinations
# TODO. Check for existence of files in injector

require 'bundler'
require 'dotenv'

task :base_image do
  sh "docker build --tag camhd_motion_analysis_rq_worker_base:latest --tag camhd_motion_analysis_rq_worker_base:#{`git rev-parse --short HEAD`.chomp} --file Dockerfile_rq_base ."
end

namespace :base_image do
  task :force do
    sh "docker build --no-cache --tag camhd_motion_analysis_rq_worker_base:latest --tag camhd_motion_analysis_rq_worker_base:#{`git rev-parse --short HEAD`.chomp} --file Dockerfile_rq_base ."
  end
end


## Test image uses an existing codebase on this computer
namespace :test do

  camhd_path = Pathname.new("../../camhd_motion_analysis")

  ## Test image needs to be built in current directory to access the camhd_motion_analysis submodule
  task :build => :base_image do
    chdir camhd_path.parent {
      docker_path = Pathnamew.new("Dockerfile_rq_test").relative_path_from( camhd_path.parent )

      Dotenv.load('test.env')
      #sh "git submodule update --init --recursive camhd_motion_analysis"
      sh "docker build --build-arg CAMHD_PATH=#{camhd_path} "\
                "--tag camhd_motion_analysis_rq_worker:test " \
                  "--file #{docker_path} "
    }
  end

  task :run do
    sh "docker run --rm "\
            "--env-file test.env " \
            "--volume /home/aaron/canine/camhd_analysis/CamHD_motion_metadata:/output/CamHD_motion_metadata"\
            " camhd_motion_analysis_rq_worker:test  --log INFO"
  end


  task :run_prod_env do
    Dotenv.load('deploy/desktop_cluster/prod.env')
    sh "docker run --rm --env-file deploy/desktop_cluster/prod.env "\
           " --network lazycache" \
           " --volume camhd_motion_metadata_by_nfs:/output/CamHD_motion_metadata "\
           " camhd_motion_analysis_rq_worker:test --log INFO"
  end

  task :inject do
    Dotenv.load('test.env')
    sh "docker run --rm --env-file test.env "\
            " --entrypoint python3 "\
            " --network lazycache" \
            " --volume camhd_motion_metadata_by_nfs:/output/CamHD_motion_metadata" \
            " camhd_motion_analysis_rq_worker:test"\
            " /code/camhd_motion_analysis/python/rq_client.py " \
            " --log INFO" \
            " --threads 16 " \
            " --lazycache-url http://lazycache_nocache:8080/v1/org/oceanobservatories/rawdata/files" \
            " --output-dir /output/CamHD_motion_metadata"\
            " /RS03ASHS/PN03B/06-CAMHDA301/2016/02/01/"
  end

end




## Production images build pristine copy from github
namespace :prod do

  task :build => :base_image do
      sh "docker build --no-cache "\
            " --tag camhd_motion_analysis_rq_worker:latest " \
            " --tag camhd_motion_analysis_rq_worker:#{`git rev-parse --short HEAD`.chomp} "\
            " --tag amarburg/camhd_motion_analysis_rq_worker:latest" \
            " --file Dockerfile_rq_prod ."
  end

  # task :push do
  #   sh "docker push amarburg/camhd_motion_analysis_rq_worker:latest"
  # end

   task :run do
     Dotenv.load('deploy/desktop_cluster/prod.env')
     sh "docker run --rm --env-file deploy/desktop_cluster/prod.env "\
            " --network lazycache" \
            " --volume camhd_motion_metadata_by_nfs:/output/CamHD_motion_metadata "\
            " amarburg/camhd_motion_analysis_rq_worker:latest --log INFO"
   end

  task :inject do
    Dotenv.load('test.env')
    sh "docker run --rm --env-file test.env "\
            " --entrypoint python3 "\
            " --network lazycache" \
            " --volume camhd_motion_metadata_by_nfs:/output/CamHD_motion_metadata" \
            " amarburg/camhd_motion_analysis_rq_worker:latest"\
            " /code/camhd_motion_analysis/python/rq_client.py " \
            " --threads 16 " \
            " --lazycache-url http://lazycache_nocache:8080/v1/org/oceanobservatories/rawdata/files" \
            " --output-dir /output/CamHD_motion_metadata"\
            " /RS03ASHS/PN03B/06-CAMHDA301/2016/02/01/"
  end
end
