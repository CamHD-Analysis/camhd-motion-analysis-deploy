
require 'bundler'
require 'dotenv'

lazycache_name = "lazycache"
network_name = lazycache_name

lazycache_image_dockerhub = "amarburg/lazycache_prod:latest"
lazycache_image_gcr = "us.gcr.io/camhd-motion-analysis-swarm/lazycache_prod:latest"
lazycache_repo = "#{ENV['GOPATH']}/src/github.com/amarburg/go-lazycache/deploy/docker/"

worker_image_dockerhub = "amarburg/camhd_motion_analysis_rq_worker:latest"
worker_image_gcr = "us.gcr.io/camhd-motion-analysis-swarm/lazycache_prod:latest"

instance_version = "rev1"
instance_name   = "swarm-coreos-alpha-n1-highcpu-8"
instance_fullname = [instance_name, instance_version].join('-')


task :default

namespace :network do
  task :create do
    sh "docker network create --attachable --driver=overlay #{network_name}"
  end
end

namespace :lazycache do

  task :build do
    chdir( lazycache_repo ) do
      sh "docker build --no-cache  --tag #{lazycache_image_dockerhub}  --file #{lazycache_repo}/Dockerfile ."
    end
  end

  task :push do
    sh "docker push #{lazycache_image_dockerhub}"
    sh "docker tag #{lazycache_image_dockerhub} #{lazycache_image_gcr}"
    sh "gcloud docker -- push #{lazycache_image_gcr}"
  end

  task :deploy => :push do
    sh "docker service create --name #{lazycache_name} --network #{network_name} -p 8080 #{lazycache_image_dockerhub}"
  end
end


namespace :worker do
  task :push do
    sh "docker push #{worker_image_dockerhub}"
    sh "docker tag #{worker_image_dockerhub} #{worker_image_gcr}"
    sh "gcloud docker -- push #{worker_image_gcr}"
  end
end


namespace :gcloud do



  task :redis do
    sh "docker run  --detach --env-file gcloud/prod.env -p 6379:6379 --name redis -v /home/amarburg/bitnami:/bitnami bitnami/redis:latest"
  end


  task :worker do
    sh "docker service create --env-file prod.env --name worker "\
        "--constraint node.role!=manager --network #{network_name} "\
        "--mount type=volume,volume-opt=o=addr=swarm-manager,volume-opt=device=:/home/amarburg/CamHD_motion_metadata,volume-opt=type=nfs,source=camhd_motion_metadata_by_nfs,target=/output/CamHD_motion_metadata,volume-nocopy " \
        "#{worker_image_gcr} --log INFO"
  end


  namespace :manager do
    task :ssh do
      sh "gcloud --project=camhd-motion-analysis-swarm compute ssh swarm-manager "
    end

    task :create do
      sh "docker-machine --project=camhd-motion-analysis-swarm create swarm-manager -d google " \
          " --google-machine-type g1-small "\
          " --google-zone us-central1-a "\
          " --google-tags swarm-cluster "\
          " --google-project camhd-motion-analysis-swarm " \
          " --swarm-master " \
          " --google-tags redis-tcp-6379" \
          " --metadata-from-file startup-script=gcloud/swarm-manager-startup-script.sh"
    end
  end

  ## Tasks for setting up the swarm
  namespace :instance_group do

      task :create_template do
        sh "gcloud --project=camhd-motion-analysis-swarm compute instance-templates create #{instance_fullname} \
            --machine-type n1-highcpu-8 \
            --preemptible \
            --image-family coreos-alpha \
            --image-project coreos-cloud \
            --boot-disk-size 10GB \
            --metadata-from-file user-data=gcloud/swarm-worker-cloud-init"
      end

      task :start do
        sh "gcloud --project=camhd-motion-analysis-swarm compute instance-groups managed create worker-alpha-swarm \
            --template #{instance_fullname} \
            --base-instance-name #{instance_name} \
            --size 1 \
            --zone us-central1-a"
      end

  end


end


namespace :desktop do

  task :lazycache do
    sh "docker service create --name lazycache --network #{network_name} -p 8080 #{lazycache_tag}"
  end

  namespace :worker do
    task :deploy do
      sh "docker service create --env-file prod.env --name worker "\
      "--network #{network_name} "\
      "--mount type=volume,volume-opt=o=addr=192.168.13.110,volume-opt=device=:/mnt/zvol1/users/aaron/camhd_analysis/CamHD_motion_metadata/,volume-opt=type=nfs,source=camhd_motion_metadata_by_nfs,target=/output/CamHD_motion_metadata,volume-nocopy " \
      "#{worker_image_dockerhub} --log INFO"
    end
  end

end


inject_path = ENV["INJECT_PATH"] || " /RS03ASHS/PN03B/06-CAMHDA301/2016/03/"

task :inject do
  Dotenv.load('prod.env')
  sh "docker run --rm --env-file prod.env "\
  " --entrypoint python3 "\
  " --network #{network_name}" \
  " --volume camhd_motion_metadata_by_nfs:/output/CamHD_motion_metadata" \
  " #{worker_image_dockerhub}"\
  " /code/camhd_motion_analysis/python/rq_client.py " \
  " --threads 16 " \
  " --log INFO " \
  " --lazycache-url http://#{lazycache_name}:8080/v1/org/oceanobservatories/rawdata/files" \
  " --output-dir /output/CamHD_motion_metadata"\
  " #{inject_path}"
end
